name: Flower App CI

on:
  push:
    branches: [Aqil]
  # pull_request:
  #   branches: [main]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  test:
    name: üß™ Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pytest ansible flwr torch scikit-learn pandas
      - name: Run tests
        run: pytest flower_nih/tests.py

  # validate-hosts:
  #   name: ‚úÖ Validate hosts.yml
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Install PyYAML
  #       run: pip install pyyaml
  #     - name: Validate hosts.yml format
  #       run: python -c "import yaml; yaml.safe_load(open('hosts.yml'))"

  # generate-inventory:
  #   name: ‚öôÔ∏è Generate inventory and host_vars
  #   runs-on: ubuntu-latest
  #   needs: validate-hosts
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Generate inventory and host_vars
  #       run: |
  #         pip install .
  #         python deploy.py --generate-inventory --generate-host-vars
  #     - name: Upload inventory artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: inventory-artifacts
  #         path: |
  #           ansible/inventory.ini
  #           ansible/host_vars/

  # generate-certs:
  #   name: üîê Generate certificates
  #   runs-on: ubuntu-latest
  #   needs: validate-hosts
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Generate TLS certificates
  #       run: |
  #         pip install .
  #         python deploy.py --generate-certs
  #     - name: Upload cert artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cert-artifacts
  #         path: distributed/superlink-certificates/

  # test-connectivity:
  #   name: üîç Test SSH/Ansible connectivity
  #   runs-on: ubuntu-latest
  #   needs: generate-inventory
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Test Ansible SSH connectivity
  #       run: |
  #         pip install .
  #         python deploy.py --test

  # deploy:
  #   name: üöÄ Deploy to hosts
  #   runs-on: ubuntu-latest
  #   needs: test-connectivity
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Deploy to all hosts
  #       run: |
  #         pip install .
  #         python deploy.py --deploy

  # build:
  #   name: ‚ôªÔ∏è Build/Restart containers
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Build and restart containers
  #       run: |
  #         pip install .
  #         python deploy.py --build

  # train:
  #   name: üß† Run Federated Training
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Install Flower
  #       run: pip install flwr
  #     - name: Start training
  #       run: flwr run . local-deployment --stream
