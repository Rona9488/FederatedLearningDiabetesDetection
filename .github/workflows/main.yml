name: Flower App CI

on:
  push:
    branches: [Aqil]
  workflow_dispatch:

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  test:
    name: üß™ Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          # pip install pytest ansible flwr torch scikit-learn pandas prometheus_client
          echo "miaw"
      - name: Run tests
        run: | 
          echo "mawi"
          # pytest flower_nih/tests.py

  validate-hosts:
    name: ‚úÖ Validate hosts.yml
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Validate hosts.yml format
        run: |
          cat <<EOF > hosts.yml
          server:
            ip: localhost
            ip_pub: 127.0.0.1
            username: runner
          
          clients:
            - ip: localhost
              ip_pub: 127.0.0.1
              username: runner
            - ip: localhost
              ip_pub: 127.0.0.1
              username: runner
          EOF
          pip install pyyaml
          python -c "import yaml; yaml.safe_load(open('hosts.yml'))"

  generate-inventory:
    name: ‚öôÔ∏è Generate inventory and host_vars
    runs-on: ubuntu-latest
    needs: validate-hosts
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Generate inventory and host_vars
        run: |
          pip install .
          python deploy.py --generate-inventory --generate-host-vars
      - name: Upload inventory artifacts
        uses: actions/upload-artifact@v4
        with:
          name: inventory-artifacts
          path: |
            ansible/inventory.ini
            ansible/host_vars/

  generate-certs:
    name: üîê Generate certificates
    runs-on: ubuntu-latest
    needs: validate-hosts
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Generate TLS certificates
        run: |
          pip install .
          python deploy.py --generate-certs
      - name: Upload cert artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cert-artifacts
          path: distributed/superlink-certificates/

  test-connectivity:
    name: üîç Test SSH/Ansible connectivity
    runs-on: ubuntu-latest
    needs: generate-inventory
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Test Ansible SSH connectivity
        run: |
          pip install .
          python deploy.py --test

  deploy:
    name: üöÄ Deploy to hosts
    runs-on: ubuntu-latest
    needs: test-connectivity
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Download inventory artifacts
        uses: actions/download-artifact@v4
        with:
          name: inventory-artifacts
          path: ansible/

      - name: Download certificate artifacts
        uses: actions/download-artifact@v4
        with:
          name: cert-artifacts
          path: distributed/superlink-certificates/

      - name: Deploy to all hosts (creates /home/runner/fl_*)
        run: |
          pip install .
          python deploy.py --deploy

      - name: Copy fl_* folders from home to workspace
        run: |
          cp -r /home/runner/fl_client_* $GITHUB_WORKSPACE/ || true
          cp -r /home/runner/fl_server* $GITHUB_WORKSPACE/ || true

      - name: Upload deployment-generated folders
        uses: actions/upload-artifact@v4
        with:
          name: deployment-folders
          path: |
            fl_client_*
            fl_server*
            
  train:
    name: üöÄ Build and Train
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download inventory artifacts
        uses: actions/download-artifact@v4
        with:
          name: inventory-artifacts
          path: ansible/

      - name: Download certificate artifacts
        uses: actions/download-artifact@v4
        with:
          name: cert-artifacts
          path: distributed/superlink-certificates/

      - name: Download deployment folders
        uses: actions/download-artifact@v4
        with:
          name: deployment-folders
          path: ./restored/

      - name: Restore fl_* folders to /home/runner/
        run: |
          cp -r ./restored/fl_client_* /home/runner/ || true
          cp -r ./restored/fl_server* /home/runner/ || true
          ##
          cat /home/runner/fl_server1/server/compose.yml
          cat /home/runner/fl_client_1/client/compose.yml
          cat /home/runner/fl_client_2/client/compose.yml

      - name: Create server/state folder manually
        run: |
          mkdir -p /home/runner/fl_server1/server/state
          mkdir -p /home/runner/fl_server1/server/global_models
          sudo chown -R 49999:49999 /home/runner/fl_server1/server/state /home/runner/fl_server1/server/global_models || true

      - name: Build and restart containers
        run: |
          pip install .
          python deploy.py --build
          sleep 50
          docker ps -a

      - name: Install Flower serverapp
        run: |
          docker logs server-serverapp-1 
      
      - name: Install Flower superlink
        run: |
          docker logs server-superlink-1 
      
      - name: Install Flower clientapp
        run: |
          docker logs client_2-supernode-2-1 
      
      - name: Install Flower clientapp
        run: |
          docker logs client_2-clientapp-2-1 
          
      - name: Install Flower
        run: |
          cat pyproject.toml
          tree -L 5
          ls -la ./distributed/superlink-certificates/
          python deploy.py --local
          pip install .
          pip install flwr

      - name: Start training
        run: |
          sleep 30
          docker logs server-superlink-1
          flwr run . local-deployment --stream
